import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher.filters import ChatTypeFilter, Command, BoundFilter
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from datetime import datetime, timedelta
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('moderation.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('BOT_TOKEN')
MAX_WARNINGS = int(os.getenv('MAX_WARNINGS', 3))
BAN_DURATION = int(os.getenv('BAN_DURATION', 15))
BANNED_PHRASES = os.getenv('BANNED_PHRASES', 'vk.com,vk.ru,vkontakte.ru').split(',')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not API_TOKEN:
    logging.error("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã: {BANNED_PHRASES}")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'moderation_data.json'

class AdminFilter(BoundFilter):
    key = 'is_admin'

    async def check(self, message: types.Message):
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.is_chat_admin()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.filters_factory.bind(AdminFilter)


def init_data_file():
    data_dir = '/app/data'
    data_file = os.path.join(data_dir, 'moderation_data.json')

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(data_dir, exist_ok=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(data_file):
        initial_data = {
            "warnings": {},
            "banned": {},
            "restricted_users": {
                "no_links": {},
                "fully_restricted": {}
            }
        }
        with open(data_file, 'w') as f:
            json.dump(initial_data, f, indent=4)
        os.chmod(data_file, 0o666)


def load_data():
    default_data = {
        "warnings": {},
        "banned": {},
        "restricted_users": {
            "no_links": {},
            "fully_restricted": {}
        }
    }

    try:
        if not os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'w') as f:
                json.dump(default_data, f, indent=4)
            return default_data

        with open(DATA_FILE, 'r') as f:
            data = json.load(f)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
            for key in default_data:
                if key not in data:
                    data[key] = default_data[key]

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É restricted_users
            if 'restricted_users' not in data:
                data['restricted_users'] = default_data['restricted_users']
            else:
                for subkey in ['no_links', 'fully_restricted']:
                    if subkey not in data['restricted_users']:
                        data['restricted_users'][subkey] = {}

            return data

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {e}")
        with open(DATA_FILE, 'w') as f:
            json.dump(default_data, f, indent=4)
        return default_data


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    try:
        with open(DATA_FILE, 'w') as f:
            json.dump(data, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def log_deleted_message(user_id, user_name, message_text, reason):
    log_entry = {
        'timestamp': str(datetime.now()),
        'user_id': user_id,
        'user_name': user_name,
        'message': message_text,
        'reason': reason
    }
    logger.info(f"Deleted message: {log_entry}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
async def is_admin(chat_id, user_id):
    member = await bot.get_chat_member(chat_id, user_id)
    return member.is_chat_admin()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞
def get_unban_keyboard(user_id):
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"unban_{user_id}")
    )




# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(Command("restrict"), AdminFilter())
async def restrict_user(message: types.Message):
    try:
        if not message.reply_to_message:
            await message.reply("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å")
            return

        target_user = message.reply_to_message.from_user
        data = load_data()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        data['restricted_users']['fully_restricted'][str(target_user.id)] = {
            'name': target_user.full_name,
            'restricted_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        save_data(data)

        await message.reply(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.get_mention()} —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
@dp.message_handler(Command("unrestrict"), AdminFilter())
async def unrestrict_user(message: types.Message):
    try:
        if not message.reply_to_message:
            await message.reply("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å")
            return

        target_user = message.reply_to_message.from_user
        user_id = str(target_user.id)
        data = load_data()
        restricted_users = data['restricted_users']
        unrestricted = False

        # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        for restriction_type in ['fully_restricted', 'no_links']:
            if user_id in restricted_users[restriction_type]:
                del restricted_users[restriction_type][user_id]
                unrestricted = True

        if unrestricted:
            save_data(data)
            await message.reply(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.get_mention()} –±–æ–ª—å—à–µ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
                parse_mode='HTML'
            )
        else:
            await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")


@dp.message_handler(Command("restricted_list"), AdminFilter())
async def list_restricted_users(message: types.Message):
    data = load_data()
    restricted_users = data.get('restricted_users', {}).get('fully_restricted', {})

    if not restricted_users:
        await message.reply("‚ÑπÔ∏è –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    users_list = []
    for user_id, user_data in restricted_users.items():
        name = user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        restricted_at = user_data.get('restricted_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è')
        users_list.append(f"üë§ {name} (ID: {user_id}) - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω {restricted_at}")

    await message.reply("üìã –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n" + "\n".join(users_list))


@dp.message_handler(Command("ban_links"), AdminFilter())
async def ban_links_for_user(message: types.Message):
    """–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏"""
    if not message.reply_to_message:
        await message.reply("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    user = message.reply_to_message.from_user
    data = load_data()

    data['restricted_users']['no_links'][str(user.id)] = {
        'name': user.full_name,
        'banned_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    save_data(data)

    await message.reply(
        f"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.get_mention()} –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏",
        parse_mode='HTML'
    )


@dp.message_handler(Command("allow_links"), AdminFilter())
async def allow_links_for_user(message: types.Message):
    """–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏"""
    if not message.reply_to_message:
        await message.reply("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    user = message.reply_to_message.from_user
    data = load_data()

    if str(user.id) in data['restricted_users']['no_links']:
        del data['restricted_users']['no_links'][str(user.id)]
        save_data(data)
        await message.reply(
            f"üÜó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.get_mention()} —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏",
            parse_mode='HTML'
        )
    else:
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –±—ã–ª –∑–∞–ø—Ä–µ—â—ë–Ω –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫")


@dp.message_handler(Command("link_restrictions"), AdminFilter())
async def show_link_restrictions(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø—Ä–µ—Ç–æ–º —Å—Å—ã–ª–æ–∫"""
    data = load_data()
    restricted = data['restricted_users']['no_links']

    if not restricted:
        await message.reply("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø—Ä–µ—Ç–æ–º –Ω–∞ —Å—Å—ã–ª–∫–∏")
        return

    users_list = [f"‚Ä¢ {info['name']} (ID: {uid}) - —Å {info['banned_at']}"
                  for uid, info in restricted.items()]

    await message.reply(
        "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–ø—Ä–µ—Ç–æ–º –Ω–∞ —Å—Å—ã–ª–∫–∏:\n\n" + "\n".join(users_list)
    )


@dp.message_handler(Command("help"))
async def handle_help(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /help –æ—Ç {message.from_user.username}")
    if await AdminFilter().check(message):
        await show_admin_help(message)
    else:
        await show_user_help(message)


async def show_admin_help(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    help_text = """
<b>üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>

<u>–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</u>
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<u>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</u>
<code>/restrict</code> - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
<code>/unrestrict</code> - –°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
<code>/restricted_list</code> - –°–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<code>/ban_links</code> - –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
<code>/allow_links</code> - –†–∞–∑—Ä–µ—à–∏—Ç—å —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
<code>/link_restrictions</code> - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø—Ä–µ—Ç–æ–º —Å—Å—ã–ª–æ–∫

<u>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</u>
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ VK
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä—É–∂–æ—á–∫–æ–≤)
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è = –±–∞–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç)
"""
    await message.reply(help_text, parse_mode="HTML")

    examples_text = """
<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
1. –ß—Ç–æ–±—ã –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏:
   - –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>/ban_links</code>

2. –ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
   - –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>/allow_links</code>

3. –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö:
   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ: <code>/link_restrictions</code>
"""
    await message.answer(examples_text, parse_mode="HTML")


async def show_user_help(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    help_text = """
<b>üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>

<u>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</u>
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<u>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</u>
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ VK
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä—É–∂–æ—á–∫–æ–≤)
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è = –±–∞–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç)

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.
"""
    await message.reply(help_text, parse_mode="HTML")


# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(message: types.Message):
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    return member.is_chat_admin()


def contains_links(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if message.text or message.caption:
        text = (message.text or message.caption).lower()
        if any(proto in text for proto in ['http://', 'https://', 'www.', 't.me/', 'vk.com']):
            return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ entities (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏)
    entities = message.entities or message.caption_entities or []
    for entity in entities:
        if entity.type in ["url", "text_link"]:
            return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å —Å—Å—ã–ª–∫–∞–º–∏
    if message.reply_markup:
        for row in message.reply_markup.inline_keyboard:
            for button in row:
                if button.url:
                    return True

    return False





@dp.message_handler(chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def check_message(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    chat_id = message.chat.id

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    restricted_users = data.get('restricted_users', {})
    no_links_users = restricted_users.get('no_links', {})


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in data.get('restricted_users', {}):
        try:
            await message.delete()
            await message.answer(
                f"‚õî {message.from_user.get_mention()}, –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return

    if user_id in no_links_users and contains_links(message):
        try:
            await message.delete()
            await message.answer(
                f"‚õî {message.from_user.get_mention()}, –≤–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏",
                parse_mode='HTML'
            )
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.voice:
        await handle_rule_break(message, "–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã", data, user_id, chat_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ—á–µ–∫)
    if message.video_note:
        await handle_rule_break(message, "–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–æ—á–∫–∏) –∑–∞–ø—Ä–µ—â–µ–Ω—ã", data, user_id, chat_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    if message.text or message.caption:
        text = message.text or message.caption
        if any(phrase in text.lower() for phrase in BANNED_PHRASES):
            await handle_rule_break(message, "—Å—Å—ã–ª–∫–∏ –Ω–∞ VK –∑–∞–ø—Ä–µ—â–µ–Ω—ã", data, user_id, chat_id)
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.entities or message.caption_entities:
        entities = message.entities or message.caption_entities
        for entity in entities:
            if entity.type == "url":
                url = (message.text or message.caption)[entity.offset:entity.offset + entity.length]
                if any(phrase in url.lower() for phrase in BANNED_PHRASES):
                    await handle_rule_break(message, "—Å—Å—ã–ª–∫–∏ –Ω–∞ VK –∑–∞–ø—Ä–µ—â–µ–Ω—ã", data, user_id, chat_id)
                    return


async def handle_rule_break(message: types.Message, reason: str, data, user_id, chat_id):
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_text = message.text or message.caption or "[–º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ]"
    log_deleted_message(user_id, message.from_user.full_name, log_text, reason)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    if user_id not in data['warnings']:
        data['warnings'][user_id] = 0

    data['warnings'][user_id] += 1
    warnings = data['warnings'][user_id]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    save_data(data)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    if warnings >= MAX_WARNINGS:
        # –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ban_until = datetime.now() + timedelta(minutes=BAN_DURATION)
        data['banned'][user_id] = ban_until.strftime('%Y-%m-%d %H:%M:%S')
        save_data(data)

        try:
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                until_date=ban_until,
                permissions=types.ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False
                )
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞–∑–±–∞–Ω–∞
            admins_text = "\n".join([f"@{admin.user.username}" for admin in await bot.get_chat_administrators(chat_id)])
            warning_msg = await message.answer(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.get_mention()} –ø–æ–ª—É—á–∏–ª –±–∞–Ω –Ω–∞ {BAN_DURATION} –º–∏–Ω—É—Ç "
                f"–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª ({reason}).\n\n"
                f"–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–∞–∑–±–∞–Ω–∏—Ç—å:",
                reply_markup=get_unban_keyboard(user_id),
                parse_mode='HTML'
            )

            # –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
            await asyncio.sleep(60)
            await warning_msg.delete()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    else:
        # –û–±—ã—á–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning_msg = await message.answer(
            f"‚ö†Ô∏è {message.from_user.get_mention()}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {reason}.\n"
            f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings}/{MAX_WARNINGS}. –ü–æ—Å–ª–µ {MAX_WARNINGS} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥—É–µ—Ç –±–∞–Ω.",
            parse_mode='HTML'
        )

        # –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        await warning_msg.delete()


@dp.callback_query_handler(lambda c: c.data.startswith('unban_'))
async def process_unban(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split('_')[1]
    chat_id = callback_query.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(chat_id, callback_query.from_user.id):
        await callback_query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–∞–∑–±–∞–Ω–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    # –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        data = load_data()

        if user_id in data['banned']:
            del data['banned'][user_id]
            data['warnings'][user_id] = 0  # –°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            save_data(data)

            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=types.ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
            )

            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.", show_alert=True)
            await callback_query.message.edit_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{callback_query.from_user.username}."
            )
        else:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ.", show_alert=True)



async def on_startup(dp):
    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã
        text="üü¢ –ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω\n"
             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥"
    )


if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not API_TOKEN:
        logger.error("–û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)

    if not BANNED_PHRASES:
        logger.error("–û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω—ã BANNED_PHRASES –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)

    logger.info("–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    import asyncio

    # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    init_data_file()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)

    # from aiogram import executor
    # executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
